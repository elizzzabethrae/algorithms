1. Define and compare recursion and iteration.

Recursion is a function that calls itself to complete. Iteration is using loops to work your way through data and repeat code. They are very similar and they both work with base cases to ensure an infinite loop or infinite recursion doesn't happen and crash the program. Loops require more 'set up' with initialization condition and the increment/decrement statement. Iteration is generally faster than recursion.

2. Name five algorithms that are commonly implemented by recursion.

Fibonacci, Greatest number in an array, Factorial, Depth first search, breath first search

3. When should you use recursion, and when should you avoid recursion? Give examples for each.

While recursive functions can be super tricky and can cause issues, sometimes an algorithm simply doesn't work well with iteration, and it is simpler to write a recursive function. Most situations that can be solved with recursion can be solved with iteration too, and vice versa. However, when you are working with a straight data set, you would probably use iteration. If you want to use results that are generated in your code, you would want to use recursion.

4. Compare the recursive and iterative functions in the checkpoint.

Factorial: The recursive function is smaller, thus simpler. The iterative function is a little more complex, using loops. It seems that recursion would be the best case here, since the problem uses data created within the function to complete itself. 

Maximum: The recursive function for finding the maximum number in an array or data set is very clunky. It really is trying hard and gets there, but not the best case. The iterative function is simple and clean, and works fast.

Fibonacci: Both fibonacci statements aren't too large, but recursion is better in this case.The iterative solution uses a lot of temporary variables, and the recursive function just returns numbers as generated.

5. Write a function that counts number of items in a data set (like an array).


function count(array){
  if(array.length){
    if(typeof array[0] === "object"){
      return count(array[0]) + count(array.slice(1));
    } else {
      return 1 +count(array.slice(1));
    }
  } else {
    return 0;
  }
}

6. Write a recursive function to see if a word is a palindrome. 

function checkPalindrome (str){
  str = str.toLowerCase();
  if(str.length === 1){
    return true;
  }else if(str[0] !== str[str.length-1]){
    return false;
  }
    return checkPalindrome(str.slice(1,-1));
}

7. Google Easter Egg: Google the term "recursion". Google will prompt you with "Did you mean: recursion". Explain why this behavior exhibits properties of recursion.

This is an example of recursion because 'Did you mean: recursion' is another way to call the 'function' of googling the word recursion. When you google recursion, it prompts another way to google recursion.